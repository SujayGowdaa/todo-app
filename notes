TypeScript Basics
What is TypeScript?

A superset of JavaScript that adds static typing and other features to improve code reliability and developer productivity.
Why Use TypeScript?

Detect errors at compile time.
Better code navigation and refactoring with IDE support.
Stronger collaboration with explicit types.

Key Features

1. Types
   Primitive Types: string, number, boolean, null, undefined, symbol, bigint.
   Special Types:

   any: Opt-out of type checking.
   unknown: Safer alternative to any.
   void: No return value.
   never: Function never returns (e.g., throw).

   let name: string = "Sujay";
   let age: number = 25;

2. Arrays and Tuples
   let fruits: string[] = ["apple", "banana"];
   let tuple: [string, number] = ["apple", 1];

3. Enums
   enum Color {
   Red,
   Green,
   Blue,
   }
   let color: Color = Color.Red;

4. Functions
   Explicitly define parameter and return types.
   function add(a: number, b: number): number {
   return a + b;
   }

5. Interfaces
   Define object shapes.
   interface Person {
   name: string;
   age?: number; // Optional property
   }
   let person: Person = { name: "Sujay" };

6. Classes
   Add type annotations to properties and methods.
   class Animal {
   name: string;
   constructor(name: string) {
   this.name = name;
   }
   speak(): void {
   console.log(`${this.name} makes a noise.`);
   }
   }

Advanced Features

1. Generics
   Create reusable components.
   function identity<T>(arg: T): T {
   return arg;
   }
   let output = identity<string>("Hello");

2. Type Aliases
   Alias complex types.
   type Point = { x: number; y: number };
   let pt: Point = { x: 10, y: 20 };

3. Union and Intersection Types
   Union: Accept multiple types.
   let id: string | number;

   Intersection: Combine types.
   type A = { a: string };
   type B = { b: number };
   type AB = A & B;

4. Type Assertions
   Tell TypeScript a specific type.
   let someValue: any = "Hello";
   let strLength: number = (someValue as string).length;

Common Tools
Install TypeScript:
bash

npm install -g typescript
Compile TypeScript:
bash

tsc file.ts
Configuration:
Create tsconfig.json to customize compilation.
bash

tsc --init
